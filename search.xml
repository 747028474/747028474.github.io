<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>费曼学习法</title>
      <link href="2021/05/08/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
      <url>2021/05/08/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>首先就是费曼学习法的基本模型了：</strong></p><p><img src="https://pic4.zhimg.com/50/v2-e6885ba64760c992f7b25b08d1ed240b_hd.jpg?source=1940ef5c" alt="img"></p><p>分为四个步骤：（注明了理解）</p><ol><li>明确学习目标，确定学习内容。（一定要是具体的内容）</li><li>学会并教授他人，确定是否真会。（做到熟练掌握，深刻理解）</li><li>发现卡壳，进行查漏补缺。（可查出自己的盲点，从而进行主动补充）</li><li>简化步骤，简化表达。（当你足够理解并排除盲点后，可以对其进行简化处理，并自己用大白话重新表述一遍，训练多了，也就是像老师一样了，表达自如）</li></ol><p><strong>下面我再用数学的逻辑推理框架图展示一下：</strong></p><p><img src="https://pic4.zhimg.com/50/v2-4687ba1a3043c2c6e3f1f004401b2e47_hd.jpg?source=1940ef5c" alt="img"></p><p>所以从上图不难看出，重点在于检测你是否真正的理解，如果不理解那就重新学和补充，直到理解并简化，所谓的书越读越厚越学越薄就是这样理解的了。我们还记得那句话吗：你会了不一定能讲出来，但是能讲出来就一定会了，是有点道理哈！</p><p><strong>下面我再说明一下对费曼学习法的深入理解：</strong></p><p><img src="https://pic4.zhimg.com/50/v2-c80340947792d87755a61e546c2120e4_hd.jpg?source=1940ef5c" alt="img"></p><p>所谓对知识的学习，我认为就是输入和输出的过程，学以致用吗！所以学过之后我们相当于输入了知识，但是能不能输出呢？也就是所谓的会不会用呢？这个就需要我们不断的进行训练了。通过讲出来的方式来验证我们的掌握程度，这样倒逼我们对知识进行了深度检测，从而扫除我们认为自己懂了、认为自己会了却依然存在的盲点的问题。那我们通过费曼学习法的使用就可以主动检测出问题所在并主动补充上来，这是一种非常高效的学习方法。</p><p><strong>为啥说费曼学习法很好呢？看下图：</strong></p><p><img src="https://pic1.zhimg.com/50/v2-548a17bf674a994e42cf7bc325d64e12_hd.jpg?source=1940ef5c" alt="img"></p><p>我们学习分为主动学习和被动学习，当我们通过被动学习的方式学习，知识在大脑中的留存率也就达到最高30%，但是通过主动学习的方式学习，知识的留存率可以最高达到90%。所以我们不难看出，费曼学习法（也就是讲给他人）可以大大的提高知识在大脑中的留存率，可见学习效率之高。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p><strong>1.换位思考是重点</strong></p><p>刚开始讲给他人的时候，很难一次讲清楚（我们认为会了，但未必是真的理解了），常常出现卡壳的问题而讲不下去。主要问题就出在表达这件事上，万事开头难，熟能生巧吗！切勿着急。所以我们说两个可以帮助表达清楚的方法。</p><p>一个是站在对方的角度讲给对方听。意思就是讲解之前要设想他可能哪里不会，或者他可能哪里不理解，他是怎么想的呢，他的基础问题会在哪方面影响他听不懂等等，当你有了设想之后也就帮助你提前做好了准备和补充，这样他就容易听懂了。</p><p>另一个方法是互动表达，当你讲解时要通过对方的眼神和反馈来判断他哪里没跟上，哪里有迟疑，哪里还不懂等等，从而能帮助你及时发现他的问题在哪，及时解决，才能让他听得懂。能让对方听懂的表达最好的办法就是用定义去解释问题，并且能够建立场景化的例子，能够用白话说清楚。当我们表达也没问题了，就可以很容易讲清楚了。</p><hr><p><strong>2.讲给谁听</strong></p><p>当我们想讲给他人时就涉及一个问题，是他人主动寻求帮助还是我们主动要求讲给他人听。如果他人主动寻求是最好的，但是如果我们主动要求讲个他人听，就要注意方式方法，达到给他人讲的目的。下面再给大家推荐一下我的方法和思考。</p><p><strong>学会倾听他人的表达</strong>，要理解并接受对方的想法，对方才会愿意接受我们的想法，从而之后才会主动寻求我们的帮助。</p><p><strong>给他人讲题不是炫耀，要注意方式</strong>，不要给他人带来压力和不爽。这就要自己建立需求场景、话题引导、合理倾听、合适表达作为基础。我们可以从探讨开始，然后进行深刻交流，引出需求这样的思路入手。举个例子：比如你可以找他人给你讲解他擅长的学科，然后他讲完之后你再跟他探讨他不擅长的学科，再提到今天或近期的学习内容，引导出他想起来哪里不太会，这样他就想起来你这科还可以，就会主动寻求问题了。</p><hr><p><strong>3.思维提升</strong></p><p>刚开始我们要通过先给别人讲我们擅长的内容入手，建立信心后再把不擅长的内容或学科进行突破。通过擅长内容获得成就感和经验，从而提升了我们讲解的逻辑思维，这样再突破以往不擅长的内容就轻松很多了。</p><p>另外再说一下就是，在做任何事情之后都要养成总结经验的习惯，时间长了也就能够学会经验变通了，可以通过这方面的经验思考去解决那方面的问题，因为好多事情都是相通的！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个属于自己的博客</title>
      <link href="2021/04/29/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/04/29/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>安装Git</li><li>安装Node.js(其中包含了node , npm)</li><li>安装Hexo环境</li></ul><h3 id="Git-的安装与配置"><a href="#Git-的安装与配置" class="headerlink" title="Git 的安装与配置"></a>Git 的安装与配置</h3><p>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png" alt="img"></a></p><ol><li><p>下载好 Git 的安装包，开始安装，打开安装包，出现如图的界面，点击 Next：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png" alt="img"></a></p></li><li><p>选择你要安装的位置，我以 C 盘为例，路径为图中所示，安装到其他位置的话，点击 Browse，选择你要安装的位置，然后点击 Next，进入下一步：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png" alt="img"></a></p></li><li><p>选择你是否创建桌面快捷放方式，其他默认即可，点击 Next，进入下一步：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png" alt="img"></a></p></li><li><p>是否将 Git 快捷方式的目录加入开是菜单栏</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png" alt="img"></a></p></li><li><p>这个是选择文本编辑器的方式，默认是 Vim，也可以选择其他的方式，自主选择，在这里我选择的 Vim 默认方式。选择好文本编辑器的方式后，点击 Next，进入下一个流程：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png" alt="img"></a></p></li><li><p>选择安装 Git 时对环境变量 PATH 的影响，第一种影响较小，第三种会影响到 Windows 的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt="img"></a></p></li><li><p>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt="img"></a></p></li><li><p>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt="img"></a></p></li><li><p>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt="img"></a></p></li><li><p>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt="img"></a></p></li><li><p>安装完成</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt="img"></a></p></li><li><p>回到桌面，点击鼠标右键，会出现两个选项 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt="img"></a></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt="img"></a></p></li></ol><h3 id="Node-js-的安装与配置"><a href="#Node-js-的安装与配置" class="headerlink" title="Node.js 的安装与配置"></a>Node.js 的安装与配置</h3><ol><li><p>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></a></p><p>下载好与电脑系统对应的安装程序后，开始安装流程：</p></li><li><p>打开下载好的 Node.js 安装程序，点击 Next，进行下一步的安装；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt="img"></a></p></li><li><p>将”I accept the terms in the License Agreement” 前面的复选框勾选，同意安装协议，再点击 Next，进行下一步操作；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt="img"></a></p></li><li><p>选择 Node.js 安装程序的安装位置，在这里我以”C:\Program Files\nodejs” 为例，点击 Next，进入下一步操作；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt="img"></a></p></li><li><p>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击 Next，进入下一步操作；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt="img"></a></p></li><li><p>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如 python，C/C++ 等，点击 Next，进入下一步；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt="img"></a></p></li><li><p>点击”Install”，等待 Node.js 安装完成；</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt="img"></a></p></li><li><p>当看到下图所显示的情况，Node.js 就成功安装完毕。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt="img"></a></p></li><li><p>验证安装，并测试 Node.js 是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt="img"></a></p></li></ol><h4 id="Node-js环境变量配置"><a href="#Node-js环境变量配置" class="headerlink" title="Node.js环境变量配置"></a>Node.js环境变量配置</h4><ul><li><p>如果执行 <code>node -v</code> 报错的话，那么手动将 Node.js 的安装路径添加到环境变量中，右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png" alt="img"></a></p></li><li><p>选中 path，或者双击，然后将你 node.js 的安装路径放在 path 变量值的最后面，如果添加之前 path 值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开 cmd（Win+R），执行 <code>node -v</code>，看是否成功。</p><p>1.设置 npm 的镜像源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查看npm的配置</span><br><span class="line">npm config list</span><br><span class="line"># 默认源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org</span><br><span class="line"># 临时改变镜像源</span><br><span class="line">npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"># 永久设置为淘宝镜像源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"># 另一种方式，编辑 ~&#x2F;.npmrc 加入下面内容</span><br><span class="line">registry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>2.设置 npm 的内置路径 ——&gt; 全局模块路径和缓存路径（<em>可选</em>）</p><p>如果不改变内置路径也可，除非你的 C 盘空间足够大，这一步可以略过，不改变的话，它的路径在：</p><p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667">jyjin 的 node 环境变量配置，npm 环境变量配置</a></p><p>npm 包全局目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;Users&#x2F;[username]&#x2F;AppData&#x2F;Roaming&#x2F;npm&#x2F;node_modules</span><br></pre></td></tr></table></figure><p>npm 包全局命令目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;Users&#x2F;[username]&#x2F;AppData&#x2F;Roaming&#x2F;npm</span><br></pre></td></tr></table></figure><ul><li>npm 实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>prefix</code> 值</li><li> npm 包全局 cache 目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>cache</code> 值</li></ul><p>首先在你 Node.js 的安装位置，新建两个文件夹，<code>node_global</code> 和 <code>node_cache</code>，我的路径是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_global</span><br><span class="line">C:\Program Files\nodejs\node_cache</span><br></pre></td></tr></table></figure><p>然后分别执行的命令就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>然后在配置环境变量，右击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到 path 变量进行修改，修改值如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png" alt="img"></a></p></li></ul><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png" alt="img"></a></p><p>然后就大功告成了，Node.js 就安装完毕了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/27/hello-world/"/>
      <url>2021/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-postq"><a href="#Create-a-new-postq" class="headerlink" title="Create a new postq"></a>Create a new postq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
